//
//  URLDetailViewController.swift
//  freeza
//
//  Created by Cesar Brenes on 12/18/20.
//  Copyright (c) 2020 Zerously. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit

protocol URLDetailDisplayLogic: class {
    func displayUIInfo(viewModel: URLDetail.UIInfo.ViewModel)
    func displayFavoriteActionSuccessful(viewModel: URLDetail.FavoriteAction.ViewModel.Successful)
    func displayFavoriteActionErrorFound(viewModel: URLDetail.FavoriteAction.ViewModel.ErrorFound)
}

class URLDetailViewController: UIViewController, URLDetailDisplayLogic {
    var interactor: URLDetailBusinessLogic?
    var router: (NSObjectProtocol & URLDetailDataPassing)?
    
    @IBOutlet weak var webView: WKWebView!
    var favoriteButtonOutlet = UIButton(type: .custom)
    let activityIndicatorView = UIActivityIndicatorView(style: .gray)
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = URLDetailInteractor()
        let presenter = URLDetailPresenter()
        let router = URLDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViewController()
        requestUIInformation()
    }
    
    @objc func didTapFavoriteButton(sender: AnyObject){
        requestFavoriteAction()
    }
    
    func setupViewController() {
        webView.configuration.mediaTypesRequiringUserActionForPlayback = .video
        webView.navigationDelegate = self
        addRightNavigationButtonItems()
    }
    
    func addRightNavigationButtonItems() {
        favoriteButtonOutlet.frame = CGRect(x: 0.0, y: 0.0, width: 28, height: 28)
        favoriteButtonOutlet.addTarget(self, action: #selector(didTapFavoriteButton(sender:)), for: UIControl.Event.touchUpInside)
        let favoriteBarItem = UIBarButtonItem(customView: favoriteButtonOutlet)
        let widthAnchor = favoriteBarItem.customView?.widthAnchor.constraint(equalToConstant: 30)
        widthAnchor?.isActive = true
        let heightAnchor = favoriteBarItem.customView?.heightAnchor.constraint(equalToConstant: 30)
        heightAnchor?.isActive = true
        navigationItem.rightBarButtonItems = [favoriteBarItem, UIBarButtonItem(customView: self.activityIndicatorView)]
    }
    
    // MARK: Request methods
    func requestUIInformation() {
        activityIndicatorView.startAnimating()
        let request = URLDetail.UIInfo.Request()
        interactor?.requestUIInfo(request: request)
    }
    
    func requestFavoriteAction() {
        favoriteButtonOutlet.isUserInteractionEnabled = false
        let request = URLDetail.FavoriteAction.Request()
        interactor?.requestFavoriteAction(request: request)
    }
    
    // MARK: Display methods
    func displayUIInfo(viewModel: URLDetail.UIInfo.ViewModel) {
        DispatchQueueHelper.executeInMainThread { [weak self] in
            self?.webView.load(URLRequest(url: viewModel.url))
            self?.favoriteButtonOutlet.setImage(viewModel.image, for: .normal)
        }
    }
    
    func displayFavoriteActionSuccessful(viewModel: URLDetail.FavoriteAction.ViewModel.Successful) {
        DispatchQueueHelper.executeInMainThread { [weak self] in
            self?.favoriteButtonOutlet.isUserInteractionEnabled = true
            self?.favoriteButtonOutlet.setImage(viewModel.image, for: .normal)
        }
    }
    
    func displayFavoriteActionErrorFound(viewModel: URLDetail.FavoriteAction.ViewModel.ErrorFound) {
        DispatchQueueHelper.executeInMainThread { [weak self] in
            self?.favoriteButtonOutlet.isUserInteractionEnabled = true
            self?.present(viewModel.alertController, animated: true, completion: nil)
        }
    }
    
}

extension URLDetailViewController: WKNavigationDelegate {
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        activityIndicatorView.stopAnimating()
    }
}
