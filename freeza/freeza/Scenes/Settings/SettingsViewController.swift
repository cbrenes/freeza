//
//  SettingsViewController.swift
//  freeza
//
//  Created by Cesar Brenes on 12/17/20.
//  Copyright (c) 2020 Zerously. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: class {
    func displayDataSource(viewModel: Settings.DataSource.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic {
    var interactor: SettingsBusinessLogic?
    var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
    var dataSource = [Settings.ItemToDisplay]()
    
    @IBOutlet weak var tableView: UITableView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SettingsInteractor()
        let presenter = SettingsPresenter()
        let router = SettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        registerCustomCells()
        requestDataSource()
    }
    
    func registerCustomCells() {
        let nib = UINib(nibName: CustomCell.Name.settingsCustomTableViewCell.rawValue, bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: CustomCell.Name.settingsCustomTableViewCell.rawValue)
    }
    
    // MARK: Request methods
    func requestDataSource() {
        let request = Settings.DataSource.Request()
        interactor?.requestDataSource(request: request)
        
    }
    
    func requestSetValue(value: Bool, indexPath:IndexPath) {
        let request = Settings.SetValue.Request(indexPath: indexPath, value: value)
        interactor?.requestSetValue(request: request)
    }
    
    // MARK: Display methods
    func displayDataSource(viewModel: Settings.DataSource.ViewModel) {
        dataSource = viewModel.items
        tableView.reloadData()
    }
}


extension SettingsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CustomCell.Name.settingsCustomTableViewCell.rawValue) as? SettingsCustomTableViewCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        cell.setupCell(item: dataSource[indexPath.row], indexPath: indexPath)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0.01 // this code reduce the size of the header to almost zero, zero is not valid as an output for this reason I used 0.01
    }
}

extension SettingsViewController: SettingsCustomTableViewCellDelegate {
    func setValue(indexPath: IndexPath, value: Bool) {
        requestSetValue(value: value, indexPath: indexPath)
    }
}
