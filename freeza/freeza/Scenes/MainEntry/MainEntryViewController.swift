//
//  MainEntryViewController.swift
//  freeza
//
//  Created by Cesar Brenes on 12/18/20.
//  Copyright (c) 2020 Zerously. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainEntryDisplayLogic: class {
    func displayDataSourceSuccessFul(viewModel: MainEntry.DataStore.ViewModel.Successful)
    func displayDataSourceErrorFound(viewModel: MainEntry.DataStore.ViewModel.ErrorFound)
    func displayDetailSuccessFul(viewModel: MainEntry.Detail.ViewModel.Successful)
    func displayDetailErrorFound(viewModel: MainEntry.Detail.ViewModel.ErrorFound)
}

class MainEntryViewController: UIViewController, MainEntryDisplayLogic {
    var interactor: MainEntryInteractor?
    var mainRouter: (NSObjectProtocol & MainEntryRoutingLogic & MainEntryDataPassing)?
    
    @IBOutlet weak var tableView: UITableView!
    var items = [MainEntry.ItemToDisplay]()
    
    let activityIndicatorView = UIActivityIndicatorView(style: .gray)
    let errorLabel = UILabel()
    
    // MARK: Setup
    
    func setup(businessLogic: MainEntryBusinessLogic) {
        let viewController = self
        let presenter = MainEntryPresenter()
        let interactor = MainEntryInteractor(businessLogic: businessLogic)
        let mainRouter = MainEntryRouter()
        viewController.interactor = interactor
        viewController.mainRouter = mainRouter
        interactor.presenter = presenter
        presenter.viewController = viewController
        mainRouter.viewController = viewController
        mainRouter.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = mainRouter, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.delegate = self
        tableView.dataSource = self
        configureViews()
        requestDataSource()
        registerCustomCells()
    }
    
    func registerCustomCells() {
        let nib = UINib(nibName: CustomCell.Name.entryTableCustomTableViewCell.rawValue, bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: CustomCell.Name.entryTableCustomTableViewCell.rawValue)
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        coordinator.animate(alongsideTransition: { [weak self] (context) in
            self?.configureErrorLabelFrame()
        }, completion: nil)
    }
    
    // MARK: Request Methods
    func requestDataSource() {
        activityIndicatorView.startAnimating()
        let request = MainEntry.DataStore.Request()
        interactor?.requestDataStore(request: request)
    }
    
    func requestDetail(indexPath: IndexPath) {
        let request = MainEntry.Detail.Request(indexPath: indexPath)
        interactor?.requestDetail(request: request)
    }
    
    func dataFinishedToReload() {
        self.activityIndicatorView.stopAnimating()
    }
    
    // MARK: Display methods
    func displayDataSourceSuccessFul(viewModel: MainEntry.DataStore.ViewModel.Successful) {
        items = viewModel.items
        DispatchQueueHelper.executeInMainThread {
            self.dataFinishedToReload()
            self.navigationController?.setToolbarHidden(true, animated: true)
            self.tableView.reloadData()
        }
    }
    
    func displayDataSourceErrorFound(viewModel: MainEntry.DataStore.ViewModel.ErrorFound) {
        DispatchQueueHelper.executeInMainThread {
            self.dataFinishedToReload()
            self.errorLabel.text = viewModel.message
            self.navigationController?.setToolbarHidden(false, animated: true)
        }
    }
    
    func displayDetailSuccessFul(viewModel: MainEntry.Detail.ViewModel.Successful) {
        mainRouter?.goToDetailViewController(url: viewModel.url)
    }
    
    func displayDetailErrorFound(viewModel: MainEntry.Detail.ViewModel.ErrorFound) {
        guard let cell = tableView.cellForRow(at: viewModel.indexPath) as? EntryTableCustomTableViewCell else {
            return
        }
        cell.containerView.shake()
    }
    
    @objc func retryFromErrorToolbar() {
        requestDataSource()
    }
    
    @objc func dismissErrorToolbar() {
        self.navigationController?.setToolbarHidden(true, animated: true)
    }
    
    func configureViews() {
        configureActivityIndicatorView()
        configureTableView()
        configureToolbar()
    }
    
    
    func configureActivityIndicatorView() {
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(customView: self.activityIndicatorView)
    }
    
    func configureTableView() {
        self.tableView.rowHeight = UITableView.automaticDimension
        self.tableView.estimatedRowHeight = 110.0
    }
    
    func configureToolbar() {
        self.configureErrorLabelFrame()
        let errorItem = UIBarButtonItem(customView: self.errorLabel)
        let flexSpaceItem = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let retryItem = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(TopEntriesViewController.retryFromErrorToolbar))
        let fixedSpaceItem = UIBarButtonItem(barButtonSystemItem: .fixedSpace, target: nil, action: nil)
        let closeItem = UIBarButtonItem(image: UIImage(named: "close-button"), style: .plain, target: self, action: #selector(TopEntriesViewController.dismissErrorToolbar))
        fixedSpaceItem.width = 12
        self.toolbarItems = [errorItem, flexSpaceItem, retryItem, fixedSpaceItem, closeItem]
    }
    
    private func configureErrorLabelFrame() {
        self.errorLabel.frame = CGRect(x: 0, y: 0, width: self.view.bounds.width - 92, height: 22)
    }
}

extension MainEntryViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0.01 // this code reduce the size of the header to almost zero, zero is not valid as an output for this reason I used 0.01
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CustomCell.Name.entryTableCustomTableViewCell.rawValue) as? EntryTableCustomTableViewCell else {
            return UITableViewCell()
        }
        cell.setupCell(item: items[indexPath.row], indexPath: indexPath)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        requestDetail(indexPath: indexPath)
    }
}
