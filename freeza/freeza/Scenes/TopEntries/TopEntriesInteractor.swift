//
//  TopEntriesInteractor.swift
//  freeza
//
//  Created by Cesar Brenes on 12/18/20.
//  Copyright (c) 2020 Zerously. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class TopEntriesInteractor: MainEntryBusinessLogic, MainEntryDataStore {
    
    var presenter: MainEntryPresentationLogic?
    var apiWorker: APIWorker
    var afterTag: String?
    var apiEntries = [EntryModel]()
    var localQuickStorageWorker = LocalQuickStorageWorker(store: UserDefaultsService())
    
    init() {
        apiWorker = APIWorker(store: RedditAPI())
    }
    
    func requestDataStore(request: MainEntry.DataStore.Request) {
        apiWorker.fetchTop(after: afterTag) { [weak self] (entriesList, afterTag) in
            self?.afterTag = afterTag
            self?.apiEntries += entriesList
            self?.presenter?.presentDataSource(response: MainEntry.DataStore.Response(items: self?.apiEntries ?? [EntryModel](), errorMessage: nil, safePreference: self?.localQuickStorageWorker.get(key: User.Defaults.safe.rawValue) as? Bool ?? false))
        } errorHandler: { [weak self] (message) in
            self?.presenter?.presentDataSource(response: MainEntry.DataStore.Response(items: [EntryModel](), errorMessage: message, safePreference: self?.localQuickStorageWorker.get(key: User.Defaults.safe.rawValue) as? Bool ?? false))
        }
    }
    
    func requestDetail(request: MainEntry.Detail.Request) {
        let safe = localQuickStorageWorker.get(key: User.Defaults.safe.rawValue) as? Bool ?? false
        presenter?.presentDetail(response: MainEntry.Detail.Response(item: apiEntries[request.indexPath.row], indexPath: request.indexPath, safePreference: safe))
    }
}
